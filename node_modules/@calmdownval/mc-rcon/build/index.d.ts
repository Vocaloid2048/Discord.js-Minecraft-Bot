import { Signal, SyncSignal } from '@calmdownval/signal';

declare enum OutPacketKind {
    AUTH = 3,
    COMMAND = 2,
    COMMAND_TX = 100
}
interface OutPacket {
    readonly id: number;
    readonly kind: OutPacketKind;
    readonly payload: string;
}
declare enum InPacketKind {
    AUTH = 2,
    COMMAND = 0
}
interface InPacket {
    readonly id: number;
    readonly kind: InPacketKind;
    readonly payload: string;
}

interface ReceiveOptions {
    timeout?: number;
    cancel?: Signal<void>;
}
declare class RConSocket {
    private readonly socket;
    readonly error: SyncSignal<void>;
    readonly message: SyncSignal<InPacket>;
    private _data?;
    private _isConnected;
    private _isDrained;
    get isConnected(): boolean;
    constructor();
    connect(host: string, port?: number): Promise<void>;
    close(): Promise<void>;
    send(packet: OutPacket): Promise<void>;
    receive(id: number, options?: ReceiveOptions): Promise<InPacket>;
    private drain;
    private write;
    private onClose;
    private onData;
    private onDrain;
}

declare class Client {
    readonly socket: RConSocket;
    private _isLoggedIn;
    timeout: number;
    get isConnected(): boolean;
    get isLoggedIn(): boolean;
    connect(host: string, port?: number): Promise<void>;
    close(): Promise<void>;
    login(password: string): Promise<void>;
    exec(command: string): Promise<string>;
}

export { Client, RConSocket, ReceiveOptions };
