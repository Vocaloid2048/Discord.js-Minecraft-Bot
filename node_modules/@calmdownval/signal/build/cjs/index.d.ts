declare type Wrap<T> = T extends void ? [] : T extends unknown[] ? T : [T];
export interface Handler<TArgs = void> {
    (...args: Wrap<TArgs>): Promise<unknown> | void;
    inner?: Handler<TArgs>;
}
export interface SyncSignal<TArgs = void> {
    (...args: Wrap<TArgs>): void;
    readonly list: Handler<TArgs>[];
    readonly lock: () => void;
}
export interface SyncSignalOptions {
    async?: false;
}
export declare function createSync<TArgs = void>(): SyncSignal<TArgs>;
export interface AsyncSignal<TArgs = void> {
    (...args: Wrap<TArgs>): Promise<void>;
    readonly list: Handler<TArgs>[];
    readonly lock: () => void;
}
export interface AsyncSignalOptions {
    async?: true;
    parallel?: boolean;
}
export declare function createAsync<TArgs = void>(options?: AsyncSignalOptions): AsyncSignal<TArgs>;
export declare type Signal<TArgs = void> = SyncSignal<TArgs> | AsyncSignal<TArgs>;
export declare type SignalOptions = SyncSignalOptions | AsyncSignalOptions;
export declare function create<TArgs = void>(options?: SyncSignalOptions): SyncSignal<TArgs>;
export declare function create<TArgs = void>(options?: AsyncSignalOptions): AsyncSignal<TArgs>;
export declare function off<TArgs>(signal: Signal<TArgs>, handler?: Handler<TArgs>): boolean;
export interface HandlerOptions {
    once?: boolean;
}
export declare function on<TArgs>(signal: Signal<TArgs>, handler: Handler<TArgs>, options?: HandlerOptions): void;
export declare function once<TArgs>(signal: Signal<TArgs>, handler: Handler<TArgs>): void;
export {};
